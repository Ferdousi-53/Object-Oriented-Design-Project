// Player.java
public abstract class Player {
    private String name;
    private int age;

    public Player(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public abstract void play();
}

// Batsman.java
public class Batsman extends Player {
    private int runsScored;

    public Batsman(String name, int age, int runsScored) {
        super(name, age);
        this.runsScored = runsScored;
    }

    public int getRunsScored() {
        return runsScored;
    }

    @Override
    public void play() {
        // Batsman specific implementation of playing
        System.out.println(getName() + " is batting.");
    }
}

// Bowler.java
public class Bowler extends Player {
    private int wicketsTaken;

    public Bowler(String name, int age, int wicketsTaken) {
        super(name, age);
        this.wicketsTaken = wicketsTaken;
    }

    public int getWicketsTaken() {
        return wicketsTaken;
    }

    @Override
    public void play() {
        // Bowler specific implementation of playing
        System.out.println(getName() + " is bowling.");
    }
}


/*In this example, the Player class is a base class for different types of players in cricket.
Each subclass (Batsman and Bowler) can be substituted for 
the Player class without affecting the correctness of the program.*/
