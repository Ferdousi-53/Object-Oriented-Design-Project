// Player.java
public interface Player {
    String getName();
    int getAge();
    void play();
}

// Batsman.java
public class Batsman implements Player {
    private String name;
    private int age;
    private int runsScored;

    public Batsman(String name, int age, int runsScored) {
        this.name = name;
        this.age = age;
        this.runsScored = runsScored;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public int getRunsScored() {
        return runsScored;
    }

    @Override
    public void play() {
        // Batsman specific implementation of playing
        System.out.println(name + " is batting.");
    }
}

// Bowler.java
public class Bowler implements Player {
    private String name;
    private int age;
    private int wicketsTaken;

    public Bowler(String name, int age, int wicketsTaken) {
        this.name = name;
        this.age = age;
        this.wicketsTaken = wicketsTaken;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public int getWicketsTaken() {
        return wicketsTaken;
    }

    @Override
    public void play() {
        // Bowler specific implementation of playing
        System.out.println(name + " is bowling.");
    }
}

/*In this example, we have segregated the Player interface into smaller interfaces
(Player and Bowler). Each class implements only the methods it needs, 
adhering to the Interface Segregation Principle.*/
